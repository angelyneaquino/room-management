import tkinter as tk
from tkinter import messagebox, simpledialog
import mysql.connector

class SupplierPage:
    def __init__(self, master):
        self.master = master
        self.master.title("Supplier Management")

        # Connect to MySQL database
        self.conn = mysql.connector.connect(
            host='localhost',
            user='your_username',  # Replace with your MySQL username
            password='your_password',  # Replace with your MySQL password
            database='your_database'  # Replace with your database name
        )
        self.cursor = self.conn.cursor()

        # Create UI elements
        self.label = tk.Label(master, text="Supplier Management")
        self.label.pack()

        self.add_button = tk.Button(master, text="Add Supplier", command=self.add_supplier)
        self.add_button.pack()

        self.edit_button = tk.Button(master, text="Edit Supplier", command=self.edit_supplier)
        self.edit_button.pack()

        self.remove_button = tk.Button(master, text="Remove Supplier", command=self.remove_supplier)
        self.remove_button.pack()

        self.view_button = tk.Button(master, text="View Suppliers", command=self.view_suppliers)
        self.view_button.pack()

    def add_supplier(self):
        name = simpledialog.askstring("Input", "Enter supplier name:")
        contact = simpledialog.askstring("Input", "Enter supplier contact:")
        address = simpledialog.askstring("Input", "Enter supplier address:")
        
        if name and contact and address:
            try:
                self.cursor.execute("INSERT INTO suppliers (name, contact, address) VALUES (%s, %s, %s)", (name, contact, address))
                self.conn.commit()
                messagebox.showinfo("Info", f"Added supplier: {name}.")
            except mysql.connector.Error as err:
                messagebox.showerror("Error", f"Error: {err}")

    def edit_supplier(self):
        supplier_id = simpledialog.askinteger("Input", "Enter supplier ID to edit:")
        if supplier_id:
            name = simpledialog.askstring("Input", "Enter new supplier name:")
            contact = simpledialog.askstring("Input", "Enter new supplier contact:")
            address = simpledialog.askstring("Input", "Enter new supplier address:")
            
            if name and contact and address:
                try:
                    self.cursor.execute("UPDATE suppliers SET name = %s, contact = %s, address = %s WHERE id = %s", (name, contact, address, supplier_id))
                    self.conn.commit()
                    if self.cursor.rowcount == 0:
                        messagebox.showerror("Error", "Supplier ID not found.")
                    else:
                        messagebox.showinfo("Info", f"Updated supplier ID: {supplier_id}.")
                except mysql.connector.Error as err:
                    messagebox.showerror("Error", f"Error: {err}")

    def remove_supplier(self):
        supplier_id = simpledialog.askinteger("Input", "Enter supplier ID to remove:")
        if supplier_id:
            try:
                self.cursor.execute("DELETE FROM suppliers WHERE id = %s", (supplier_id,))
                self.conn.commit()
                if self.cursor.rowcount == 0:
                    messagebox.showerror("Error", "Supplier ID not found.")
                else:
                    messagebox.showinfo("Info", f"Removed supplier ID: {supplier_id}.")
            except mysql.connector.Error as err:
                messagebox.showerror("Error", f"Error: {err}")

    def view_suppliers(self):
        self.cursor.execute("SELECT * FROM suppliers")
        suppliers = self.cursor.fetchall()
        if not suppliers:
            messagebox.showinfo("Info", "No suppliers found.")
        else:
            supplier_list = "\n".join([f"ID: {supplier[0]}, Name: {supplier[1]}, Contact: {supplier[2]}, Address: {supplier[3]}" for supplier in suppliers])
            messagebox.showinfo("Current Suppliers", supplier_list)

    def __del__(self):
        self.conn.close